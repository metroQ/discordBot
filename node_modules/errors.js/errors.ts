// Error is a basic error interface
export interface Error {
    Err(): string
}

export class ErrorList {
    private es: string[];

    constructor() {
        this.es = new Array();
    }

    private handleError(err: Error) {
        this.es.push(err.Err())
    }

    private handleErrorList(el: ErrorList) {
        el.ForEach((err: string) => this.es.push(err));
    }

    private handleErrorArray(ea: Error[]) {
        ea.forEach((err: Error) => this.handleError(err));
    }

    Err(): string {
        return this.es.join(", ");
    }

    ForEach(fn: (err: string) => void) {
        this.es.forEach(fn);
    }

    Push(err: Error | Error[]) {
        switch (err.constructor) {
            case ErrorList:
                // Handle as an error list
                return this.handleErrorList(<ErrorList>err)
            case Array:
                // Handle as an array of generic Errors
                return this.handleErrorArray(<Error[]>err);
            default:
                // Handle as generic Error
                return this.handleError(<Error>err);
        }
    }
}

export class ErrorString {
    private err: string;

    constructor(err: string) {
        this.err = err;
    }

    Err(): string {
        return this.err;
    }
}